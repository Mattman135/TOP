.grid-container {
    resize: both; /*this enables resizing of the grid container by dragging from the bottom right corner*/
    overflow: auto; /*enable scrolling when resizing*/
    display: grid;
    gap: 4px;
    padding: 4px;
    border: 1px solid grey;
    background-color: skyblue;
    /*wrting pixels for each grid can be tedious especially if we have hundreds of rows and columns. to solve this we use repeat() function
    
    grid-template-rows: 150px 150px;
    grid-template-columns: 150px 150px 150px 150px 150px;*/

    /*instead of using px we can use fractional units, fr, this makes page a lot more dynamic and responsive
    fr will fill the container automatically. 1fr will distribute it equally while we can also distribute disproportionally*/

    /*repeat(2, 2fr) repeat(3, 1fr) mean first two columns have 2fr while last three have 1fr
    mixing fr and px is ok
    when reszing as small as possible there is a smallest size the items will have. this is the min-content value of the items inside
    container, p och img, use min-content to change this if needed*/

    /*grid-template-rows: repeat(2, 1fr);
    grid-template-columns: repeat(2, 2fr) repeat(3, 1fr);*/

    /*use min and max functions to control the min and max size when resizing. px is meaningless in these functions so use dynamic values
    */

    /*min(200px, 50%) means the grid row size will be calculated from the values 200px and 50% grid container height*/

    /*grid-template-rows: repeat(2, min(200px, 50%)); 
    grid-template-columns: repeat(5, max(120px, 15%));*/

    /*minmax() function is another CSS function that is especially used in grid. Note it can only be used with
    grid-template-columns, grid-template-rows, grid-auto-columns, grid-auto-rows
    it takes two arguments, first: minimum size grid track can be, second: maximum size grid track can be*/

    /*grid-template-rows: repeat(2, 1fr);
    grid-template-columns: repeat(5, minmax(150px, 200px));*/

    /*another dynamic function is clamp(minimum-size, ideal-size, maximum-size). it allows the item to resize itself until it
    reaches one of the min or max values. clamp can be used anywhere not just within a grid container
    for example width: clamp(500px, 80%, 1000px)  this will render the element (for example a div)
    with a width equal to 80% of its parent unless this number is less than 500px or bigger than 1000px*/
    grid-template-rows: repeat(2, 1fr);
    /*grid-template-columns: repeat(5, clamp(150px, 20%, 200px));*/

    /*auto-fit and auto-fill. these are useful when we use the minmax() function
    auto-fit returns highest positive integer without overflowing the grid
    auto-fill works mostly like auto-fit but is different when there are fewer items than can fill up the entirety of the grid row once
    auto-fill will bounce back to min value while auto-fit fills the whole container*/
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));

}




/*nothing to do with the lesson only make it look nice*/
.grid-item {
background-color: #444;
text-align: center;
color: #ddd;
font-family: sans-serif;
font-size: 1.5rem;
padding: 12px;
}

p {
margin: 12px auto 24px;
}

img {
height: 60px;
}